{"version":3,"sources":["gif.js","App.js","serviceWorker.js","index.js","images/image.gif"],"names":["Gif","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","setState","term","target","value","handleSubmit","preventDefault","url","concat","state","fetch","then","response","json","data","img","image_url","catch","e","console","log","react_default","a","createElement","className","src","image","height","alt","onSubmit","Component","App","gif","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"iPA2CiBA,cAtCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,SAAW,SAACC,GACVR,EAAKS,SAAS,CAAEC,KAAMF,EAAMG,OAAOC,SATlBZ,EAWnBa,aAAe,SAACL,GACdA,EAAMM,iBACN,IACMC,EAAG,4CAAAC,OAA+ChB,EAAKiB,MAAMP,KAA1D,aAAAM,OADO,iBAEhBE,MAAMH,GACHI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAItB,EAAKS,SAAS,CAAEC,KAAK,GAAIa,IAAKD,EAAKA,KAAKE,cACrDC,MAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,QAASF,MAhBnC1B,EAAKiB,MAAQ,CACXP,KAAM,GACNa,IAAK,IAJUvB,wEAsBjB,OACE6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAOF,UAAU,YAAYG,OAAO,KAAKC,IAAI,MAEzDP,EAAAC,EAAAC,cAAA,QAAMM,SAAUlC,KAAKU,cACnBgB,EAAAC,EAAAC,cAAA,SAAOnB,MAAOT,KAAKc,MAAMP,KAAMH,SAAUJ,KAAKI,WAC9CsB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,YAEFH,EAAAC,EAAAC,cAAA,OAAKE,IAAK9B,KAAKc,MAAMM,IAAKY,OAAO,MAAMC,IAAI,aAjCnCE,aCSHC,mLARX,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAD,cAJUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.466e874c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport image from './images/image.gif';\r\n\r\nclass Gif extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        term: '',\r\n        img: ''\r\n      };\r\n    }\r\n  \r\n    onChange = (event) => {\r\n      this.setState({ term: event.target.value });\r\n    }\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      const api_key = 'dc6zaTOxFJmzC';\r\n      const url = `https://api.giphy.com/v1/gifs/random?tag=${this.state.term}&api_key=${api_key}`;\r\n      fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({ term:'', img: data.data.image_url }))\r\n        .catch(e => console.log('error', e));\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"App\">\r\n          <div className=\"head\">\r\n            <h1>GIF GENERATOR</h1>\r\n            <img src={image} className=\"gif-image\" height=\"80\" alt=\"\"/>\r\n          </div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input value={this.state.term} onChange={this.onChange} />\r\n            <button className=\"gif-button\">Search!</button>\r\n          </form>\r\n          <img src={this.state.img} height=\"400\" alt=\"\"/>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Gif;","import React, { Component } from 'react';\nimport Gif from './gif';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Gif />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.9202f5d0.gif\";"],"sourceRoot":""}